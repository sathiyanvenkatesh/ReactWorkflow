[{"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\index.js":"1","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\reportWebVitals.js":"2","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\app\\Store.js":"3","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\App.js":"4","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\redux-sclice\\popupwindow.js":"5","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\redux-sclice\\UserSclice.js":"6","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\redux-sclice\\SvcSearchSlice.js":"7","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\redux-sclice\\SvcSclice.js":"8","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\redux-sclice\\ParamsSlice.js":"9","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\Route\\Routes.js":"10","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\auth\\NotFound.js":"11","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\auth\\Login.js":"12","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\pages\\modalpage.js":"13","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\layout\\Layout.js":"14","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\svc\\SvcEnquiry.js":"15","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\svc\\SvcUpdate.js":"16","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\svc\\SvcApprove.js":"17","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\svc\\SvcNewRequest.js":"18","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\layout\\Footer.js":"19","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\layout\\Navbar.js":"20","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\svc\\SvcsearchResultsDataTable.js":"21","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\layout\\Header.js":"22","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\layout\\Banner.js":"23"},{"size":731,"mtime":1633745817096,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"25"},{"size":577,"mtime":1634665382024,"results":"27","hashOfConfig":"25"},{"size":574,"mtime":1635320212930,"results":"28","hashOfConfig":"25"},{"size":538,"mtime":1633771201178,"results":"29","hashOfConfig":"25"},{"size":1913,"mtime":1633935176796,"results":"30","hashOfConfig":"25"},{"size":2469,"mtime":1635407127138,"results":"31","hashOfConfig":"25"},{"size":8499,"mtime":1635314618336,"results":"32","hashOfConfig":"25"},{"size":2905,"mtime":1634576979711,"results":"33","hashOfConfig":"25"},{"size":1890,"mtime":1633771200978,"results":"34","hashOfConfig":"25"},{"size":297,"mtime":1633745816921,"results":"35","hashOfConfig":"25"},{"size":2998,"mtime":1633745816895,"results":"36","hashOfConfig":"25"},{"size":2079,"mtime":1634670878411,"results":"37","hashOfConfig":"25"},{"size":309,"mtime":1635320245434,"results":"38","hashOfConfig":"25"},{"size":5574,"mtime":1635334128329,"results":"39","hashOfConfig":"25"},{"size":8896,"mtime":1635323871266,"results":"40","hashOfConfig":"25"},{"size":19794,"mtime":1635667524571,"results":"41","hashOfConfig":"25"},{"size":11028,"mtime":1635341737375,"results":"42","hashOfConfig":"25"},{"size":605,"mtime":1635182958802,"results":"43","hashOfConfig":"25"},{"size":878,"mtime":1635182958840,"results":"44","hashOfConfig":"25"},{"size":6184,"mtime":1635320152014,"results":"45","hashOfConfig":"25"},{"size":5553,"mtime":1635182958807,"results":"46","hashOfConfig":"25"},{"size":3293,"mtime":1635182958790,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1bkls9y",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\index.js",[],["99","100"],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\reportWebVitals.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\app\\Store.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\App.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\redux-sclice\\popupwindow.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\redux-sclice\\UserSclice.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\redux-sclice\\SvcSearchSlice.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\redux-sclice\\SvcSclice.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\redux-sclice\\ParamsSlice.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\Route\\Routes.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\auth\\NotFound.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\auth\\Login.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\pages\\modalpage.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\layout\\Layout.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\svc\\SvcEnquiry.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\svc\\SvcUpdate.js",["101"],"import React, { useState, useEffect } from 'react'\r\nimport { getSVCbyId, svcsSelector, udateSvcRequest} from \"../../redux-sclice/SvcSclice\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\nimport { getOpen,setAlertBox } from '../../redux-sclice/popupwindow'\r\nimport moment from 'moment';\r\n//const DEVMANAGER = ['mallika', 'apillai','sathiyan']\r\n\r\nconst DEVMANAGER = [{\"userid\":'mbshetty',\"username\":\"Mallika Shetty\"},{ \"userid\":\"apillai\",\"username\":\"Ajit Pillai\"},{\"userid\":\"vsathiya\",\"username\":\"Sathiyan Venkatesh\"}]\r\n\r\nfunction SvcUpdate() {\r\n\r\n  const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null\r\n  //const user=localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null\r\n  const { id } = useParams();\r\n  console.log(\"id\" + id);\r\n  const dispatch = useDispatch(); // add dispatch function to dipatch action to reducers and update the store \r\n  const { svcDetails, svcupdateresult } = useSelector(svcsSelector)\r\n\r\n  const [values, setValues] = useState({\r\n    requestId: id, unitManger: svcDetails.unitManger, userId: user.name\r\n  });\r\n\r\n  const set = name => {\r\n    return ({ target: { value } }) => {\r\n      setValues(oldValues => ({ ...oldValues, [name]: value }));\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    //dispatch(getSVCbyId(id) )\r\n    fetchSVCDetailsById()\r\n    console.log('hi');\r\n\r\n  }, []);\r\n\r\n  const fetchSVCDetailsById = () => {\r\n    console.log(\"inside fetchSVCDetailsById\");\r\n    const resultAction = dispatch(getSVCbyId(id))\r\n    console.log(\"resultAction\" + resultAction);\r\n    const originalPromiseResult = unwrapResult(resultAction)\r\n    console.log(\"originalPromiseResult\" + originalPromiseResult);\r\n\r\n  }\r\n\r\n  //console.log(\"svcDetails in update page \" + JSON.stringify(svcDetails));\r\n  //console.log(svcDetails.tool);\r\n  \r\n /* const contaierstyle = {\r\n    maxWidth: \"1500px\"\r\n  }*/\r\n  const spanstylegreen = {\r\n    color: \"green\",\r\n    fontWeight: \"bold\"\r\n  }\r\n  const spanstylered = {\r\n    color: \"red\",\r\n    fontWeight: \"bold\"\r\n  }\r\n\r\n  const handleSubmit = event => {\r\n   // alert('clicked');\r\n    event.preventDefault();\r\n    console.log(\"Update button clicked \");\r\n    dispatch(udateSvcRequest(values));\r\n    //if(handleValidation){\r\n    // dispatch(createNewSvcRequest(JSON.stringify(values)) )\r\n    // }\r\n    console.log(values);\r\n   if(svcupdateresult!==''){\r\n      console.log('SVC Update'+svcupdateresult);\r\n      //console.log('SVC Update'+svcupdateresult);\r\n      const payload = {type:\"success\",headerText:\"Info\",bodyText:svcupdateresult,saveButton:false};\r\n       dispatch(setAlertBox(payload))\r\n       dispatch(getOpen());\r\n    }\r\n\r\n  }\r\n\r\n\r\n  //render() {\r\n  return (\r\n    <div className=\"container\">\r\n      <h5 className=\"font-weight-bold\">SVC Access Request Update Form</h5>\r\n      <div className=\"mt-4\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group row\">\r\n            <label htmlFor=\"requestid\" className=\"col-sm-2 col-form-label text-danger \"><h6>Request ID</h6></label>\r\n            <div className=\"col-sm-4\">\r\n              <input type=\"text\" className=\"form-control\" id=\"requestid\" value={svcDetails.requestId} disabled />\r\n            </div>\r\n            <label htmlFor=\"tools\" className=\"col-sm-2 col-form-label text-danger\"><h6>Tool</h6></label>\r\n            <div className=\"col-sm-4\">\r\n              <input type=\"text\" className=\"form-control\" id=\"requestid\" value={svcDetails.tool} disabled />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-group row\">\r\n            <label htmlFor=\"requestorname\" className=\"col-sm-2 col-form-label text-danger \"><h6>Requestor Name</h6></label>\r\n            <div className=\"col-sm-4\">\r\n              <input type=\"text\" className=\"form-control\" id=\"requestorname\" value={svcDetails.requestorName} disabled />\r\n            </div>\r\n            <label htmlFor=\"requestdate\" className=\"col-sm-2 col-form-label text-danger\"><h6>Request Date</h6></label>\r\n            <div className=\"col-sm-4\">\r\n              <input type=\"text\" className=\"form-control\" id=\"requestdate\" value={ moment(svcDetails.requestDate).format(\"DD-MM-YYYY\")} disabled />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-group row\">\r\n            <label htmlFor=\"applicationname\" className=\"col-sm-2 col-form-label text-danger \"><h6>Application Name</h6></label>\r\n            <div className=\"col-sm-4\">\r\n              <input type=\"text\" className=\"form-control\" id=\"applicationname\" value={svcDetails.applicationName} disabled />\r\n            </div>\r\n            <label htmlFor=\"version\" className=\"col-sm-2 col-form-label text-danger\"><h6>Version</h6></label>\r\n            <div className=\"col-sm-4\">\r\n              <input type=\"text\" className=\"form-control\" id=\"version\" value={svcDetails.version} disabled />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-group row\">\r\n            <label htmlFor=\"durationfrom\" className=\"col-sm-2 col-form-label text-danger \"><h6>Duration From</h6></label>\r\n            <div className=\"col-sm-4\">\r\n              <input type=\"text\" className=\"form-control\" id=\"durationfrom\" value={moment(svcDetails.durationFrom).format(\"DD/MM/YYYY\")} disabled />\r\n            </div>\r\n            <label htmlFor=\"durationto\" className=\"col-sm-2 col-form-label text-danger\"><h6>Duration To</h6></label>\r\n            <div className=\"col-sm-4\">\r\n              <input type=\"text\" className=\"form-control\" id=\"durationto\" value={moment(svcDetails.durationTo).format(\"DD/MM/YYYY\")} disabled />\r\n            </div>\r\n          </div>\r\n\r\n\r\n\r\n\r\n\r\n          <div className=\"form-row\">\r\n            <div className=\"form-group col-md-12\">\r\n              <label htmlFor=\"description\" className=\"text-danger\"><h6>Description/Reason</h6></label>\r\n              <textarea className=\"form-control\" id=\"description\" value={svcDetails.reasonforReq} disabled ></textarea>\r\n            </div>\r\n\r\n          </div>\r\n          <div className=\"col-md-12\">\r\n            <div className=\"panel panel-primary\">\r\n              <div className=\"panel-heading\">\r\n                <label htmlFor=\"accessrights\" className=\"text-danger\">   <h3 className=\"panel-title\">Access Rights</h3> </label>\r\n              </div>\r\n              <div className=\"panel-body form-group row \">\r\n\r\n                <label htmlFor=\"checkout\" className=\"col-sm-3 col-form-label text-danger\"><h6>Check Out </h6></label>\r\n                <div className=\"form-check col-sm-3\">\r\n                  <input className=\"form-check-input\" type=\"checkbox\" defaultChecked={svcDetails.checkIn ? 'Y' : 'N'} value={svcDetails.checkOut} id=\"checkout\" disabled />\r\n                </div>\r\n                <label htmlFor=\"checkin\" className=\"col-sm-3 col-form-label text-danger\"><h6>Check In</h6></label>\r\n                <div className=\"form-check col-sm-3\">\r\n                  <input className=\"form-check-input\" type=\"checkbox\" defaultChecked={svcDetails.checkIn ? 'Y' : 'N'} value={svcDetails.checkIn} id=\"checkin\" disabled />\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"col-md-12\">\r\n            <div className=\"panel panel-primary\">\r\n              <div className=\"panel-heading\">\r\n                <label htmlFor=\"accessrights\" className=\"text-danger\">   <h3 className=\"panel-title\">Approvals</h3> </label>\r\n              </div>\r\n              <div className=\"panel-body form-group row \">\r\n                <label htmlFor=\"unitManger\" className=\"col-sm-3 col-form-label text-danger\"><h6>Development Manager </h6></label>\r\n                <div className=\"form-check col-sm-3\">\r\n                  {svcDetails.unitManger}\r\n                  <select id=\"unitManger\" className=\"form-control\" value={values.unitManger}   onChange={set('unitManger')}/*onChange={() => {set('unitManger')}}*/ >                   \r\n                    {DEVMANAGER.map(m => <option key={m.userid} value={m.userid}  >{m.username}</option>)}\r\n                  </select>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"form-group row\">\r\n            <label htmlFor=\"requestStatus\" className=\"col-sm-2 col-form-label text-danger \"><h6>Request Status</h6></label>\r\n            <div className=\"col-sm-4\">\r\n              <span style={svcDetails.requestStatus === 'REJ' ? spanstylered : spanstylegreen}>{svcDetails.requestStatus}</span>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"form-group\">\r\n            <button type=\"button\" className=\"btn btn-lg btn-danger\"  >Back</button> &nbsp;&nbsp;\r\n            <button type=\"submit\" className=\"btn btn-dark btn-lg\" >Update</button>\r\n\r\n          </div>\r\n\r\n        </form>\r\n\r\n\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n//}\r\n\r\nexport default SvcUpdate","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\svc\\SvcApprove.js",["102","103","104"],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\svc\\SvcNewRequest.js",["105","106","107","108","109","110"],"import React, { useEffect, useState } from 'react'\r\nimport { createNewSvcRequest, svcsSelector } from \"../../redux-sclice/SvcSclice\";\r\nimport { paramSelector,fetchDevManagers,fetchTools,fetchApplicationsNames} from \"../../redux-sclice/ParamsSlice\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { getOpen,setAlertBox } from '../../redux-sclice/popupwindow';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport addDays from 'date-fns/addDays';\r\n\r\n\r\nconst TOOLS = ['Aldo', 'SVN', 'VSS', 'Git'];\r\nconst APPLICATIONSNAME = ['EFORMS', 'GOAML', 'AECB','RRC','CBWS']\r\n//const DEVMANAGER = ['Manager1', 'Manager2']\r\nconst DEVMANAGER = [{\"userid\":'mbshetty',\"username\":\"Mallika Shetty\"},{ \"userid\":\"apillai\",\"username\":\"Ajit Pillai\"},{\"userid\":\"vsathiya\",\"username\":\"Sathiyan Venkatesh\"}]\r\n\r\n\r\nfunction SvcNewRequest() {\r\n  const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [endDate, setEndDate] = useState(addDays(new Date(),30));\r\n  const [reqDate,setReqDate]=useState(new Date())\r\n  const [values, setValues] = useState({\r\n    requestId: '', tool: '', requestorName: user.name, requestDate:reqDate, applicationName: '', version: '', durationFrom:startDate , durationTo:endDate ,\r\n    reasonforReq: '', checkOut: \"N\", checkIn: \"N\", unitManger: '', checkInReq: \"N\", deployment: \"N\", emergencyCheck: \"Y\", fromArchive: \"N\", getLatest: \"Y\",\r\n    toOtherEnv: \"N\", userId: user.name\r\n  });\r\n  const [devManager,setDevManager]=useState(null);\r\n\r\n  const dispatch = useDispatch(); // add dispatch function to dipatch action to reducers and update the store   \r\n  const history = useHistory();\r\n  const { svcaddSucessflag, hasErrors, svcaddresult } = useSelector(svcsSelector);\r\n  //const {devmanagers} = useSelector(paramSelector);\r\n  useEffect(() => {\r\n    fetchSVCPaamDetails().then(result=>{\r\n      console.log(\"result\"+JSON.stringify(result))\r\n      setDevManager(result);\r\n      console.log(\"devManageers\"+JSON.stringify(devManager))\r\n    },error=>{\r\n\r\n    })\r\n   // console.log('hi');      \r\n   // console.log(\"hi in devManger\"+devManager);\r\n  },[]);\r\n\r\nconst fetchSVCPaamDetails = async() => {\r\n  console.log('inside param methos' );\r\n  //dispatch(fetchDevManagers());\r\n  //dispatch(fetchTools());\r\n  //dispatch(fetchApplicationsNames());  \r\n      const response = await fetch('https://conv.rakbankonline.ae/eida/svc-local/api/v1/approvals/SVC_UDM')\r\n        const data = await response.json()\r\n       // console.log(data);\r\n   // setDevManager(data);\r\n   return data\r\n}\r\n   \r\n  \r\n  const set = name => {\r\n    return ({ target: { value } }) => {\r\n      setValues(oldValues => ({ ...oldValues, [name]: value }));\r\n    }\r\n  };\r\n  const handlecheckinChange = (e) => {\r\n    let isChecked = e.target.checked ? \"Y\" : \"N\";\r\n    console.log(\"isChecked\" + isChecked);\r\n    values.checkIn = isChecked;\r\n  }\r\n  const handlecheckoutChange = (e) => {\r\n    let isChecked = e.target.checked ? \"Y\" : \"N\";\r\n    console.log(\"isChecked\" + isChecked);\r\n    values.checkOut = isChecked;\r\n  }\r\n\r\n  const handleValidation = (event, values) => {\r\n    event.preventDefault()\r\n    // alert(values.tools.length);\r\n    let valid = true;\r\n    if (values.tools.length < 0) {\r\n      valid = false;\r\n      alert('tools can not be empty , please select tools');\r\n    } else if (values.version.length < 0) {\r\n      valid = false;\r\n      alert('version can not be empty , please fill the version');\r\n    }\r\n    return valid;\r\n  }\r\n\r\n\r\n  const handleSubmit = event => {\r\n    //alert('clicked');\r\n    event.preventDefault();\r\n    console.log(\"Create New Requet clicked \");\r\n    if (handleValidation) {\r\n      dispatch(createNewSvcRequest(JSON.stringify(values)))\r\n    }\r\n\r\n  }\r\n  if (svcaddSucessflag && !hasErrors && svcaddresult !== '') {\r\n    console.log('svcaddresult response' + JSON.stringify(svcaddresult));\r\n    // <Redirect to='/updatesvc/1000'/>\r\n    /*  toast.success(\"SVC Request Created Successfully\"+JSON.stringify(svcaddresult),{\r\n        position: \"top-center\",\r\n        autoClose: 5000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        draggablePercent:80\r\n        \r\n       });*/\r\n       const payload = {type:\"success\",headerText:\"Info\",bodyText:\"SVC Request Created Successfully\" + JSON.stringify(svcaddresult),saveButton:false};\r\n       dispatch(setAlertBox(payload))\r\n       dispatch(getOpen());\r\n\r\n    history.push('/updatesvc/' + JSON.stringify(svcaddresult));\r\n    // alert(\"SVC Added Successfully\");\r\n    //<ToastContainer/>\r\n    // navigate1.navigate('/updatesvc/'+row.requestid)\r\n  }\r\n  if (!svcaddSucessflag && hasErrors) {\r\n   \r\n    const payload = {type:\"Error\",headerText:\"Info\",bodyText:\"Error in creating SVC Request \",saveButton:false};\r\n    dispatch(setAlertBox(payload))\r\n    dispatch(getOpen());\r\n  }\r\n  //render() {\r\n  return (\r\n    <div className=\"container\">\r\n      <h5 className=\"font-weight-bold\">SVC Access Request Form</h5>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group row\">\r\n          <label htmlFor=\"requestId\" className=\"col-sm-2 col-form-label text-danger \">Request ID</label>\r\n          <div className=\"col-sm-4\">\r\n            <input type=\"text\" className=\"form-control\" id=\"requestId\" disabled />\r\n          </div>\r\n          <label htmlFor=\"tool\" className=\"col-sm-2 col-form-label text-danger\">Tool</label>\r\n          <div className=\"col-sm-4\">\r\n            <select id=\"tool\" className=\"form-control\" value={values.tool} onChange={set('tool')} required>\r\n              <option >Select Tool</option>\r\n              {TOOLS.map(t => <option key={t}>{t}</option>)}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group row\">\r\n          <label htmlFor=\"requestorName\" className=\"col-sm-2 col-form-label text-danger \">Requestor Name</label>\r\n          <div className=\"col-sm-4\">\r\n            <input type=\"text\" className=\"form-control big-checkbox\" id=\"requestorName\" placeholder=\"Requestor Name\" value={values.requestorName} onChange={set('requestorName')} required />\r\n          </div>\r\n          <label htmlFor=\"requestDate\" className=\"col-sm-2 col-form-label text-danger\">Request Date</label>\r\n          <div className=\"col-sm-4\">\r\n           { /*<input type=\"date\" className=\"form-control-md big-checkbox\" id=\"requestDate\" value={values.requestDate} onChange={set('requestDate')} />*/}\r\n            <DatePicker className=\"form-control\" selected={reqDate} dateFormat=\"dd/MM/yyyy\"  value={values.requestDate} minDate={new Date()} maxDate={new Date()}  disabled />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group row\">\r\n          <label htmlFor=\"applicationname\" className=\"col-sm-2 col-form-label text-danger \">Application Name</label>\r\n          <div className=\"col-sm-4\">\r\n            <select id=\"applicationName\" className=\"form-control\" value={values.applicationName} onChange={set('applicationName')}>\r\n              <option >  Select Application   </option>\r\n              {APPLICATIONSNAME.map(a => <option key={a}>{a}</option>)}\r\n            </select>\r\n          </div>\r\n          <label htmlFor=\"version\" className=\"col-sm-2 col-form-label text-danger\">Version</label>\r\n          <div className=\"col-sm-4\">\r\n            <input type=\"text\" className=\"form-control\" id=\"version\" placeholder=\"Version\" value={values.version} onChange={set('version')} required  autoComplete=\"off\"/>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group row\">\r\n          <label htmlFor=\"durationFrom\" className=\"col-sm-2 col-form-label text-danger \">Duration From</label>\r\n          <div className=\"col-sm-4\">\r\n            {/*<input type=\"date\" className=\"form-control\" id=\"durationFrom\" value={values.durationFrom} onChange={set('durationFrom')} />*/}\r\n            <DatePicker className=\"form-control\" selected={startDate} dateFormat=\"dd/MM/yyyy\"  value={values.durationFrom} minDate={new Date()} maxDate={new Date()}  onChange={(date) =>setStartDate(date)} />\r\n          </div>\r\n          <label htmlFor=\"durationTo\" className=\"col-sm-2 col-form-label text-danger\">Duration To</label>\r\n          <div className=\"col-sm-4\">\r\n            {/*<input type=\"date\" className=\"form-control\" id=\"durationTo\" value={values.durationTo} onChange={set('durationTo')} />*/}\r\n            <DatePicker className=\"form-control\" selected={endDate} dateFormat=\"dd/MM/yyyy\"  value={values.durationTo} minDate={new Date()} maxDate={addDays(new Date(),30)} onChange={(date) =>setEndDate(date)} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-row\">\r\n          <div className=\"form-group col-md-12\">\r\n            <label htmlFor=\"reasonforReq\" className=\"text-danger\">Description/Reason</label>\r\n            <textarea className=\"form-control\" id=\"reasonforReq\" placeholder=\"Description/Reason\" required value={values.reasonforReq} onChange={set('reasonforReq')}></textarea>\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"col-md-12 p-0\">\r\n          <h5 className=\"font-weight-bold\">Access Rights</h5>\r\n          <div className=\"col-md-4 form-inline p-0\">\r\n            <div >\r\n              <div className=\"form-check p-0\">\r\n                <label className=\"form-check-label text-danger\" htmlFor=\"checkOut\">Check Out</label>\r\n                <input type=\"checkbox\" className=\"form-check-input ml-2 p-2\" id=\"checkOut\" required value={values.checkOut} onChange={e => handlecheckoutChange(e)} />\r\n              </div>\r\n            </div>\r\n            <div className=\"ml-4\">\r\n              <div className=\"form-check p-0\">\r\n                <label className=\"form-check-label text-danger\" htmlFor=\"checkIn\">Check In</label>\r\n                <input type=\"checkbox\" className=\"form-check-input ml-2 p-2\" id=\"checkIn\" required value={values.checkIn} onChange={e => handlecheckinChange(e)} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-md-12 p-0 mt-2\">\r\n          <h5 className=\"font-weight-bold\">Approvals</h5>\r\n          <div className=\"form-group row\">\r\n            <label htmlFor=\"unitManger\" className=\"col-sm-4 col-form-label text-danger\">Development Manager</label>\r\n            <div className=\"form-check col-sm-4\">\r\n              <select id=\"unitManger\" className=\"form-control\" value={values.unitManger} onChange={set('unitManger')} >\r\n                <option >Select Dev Manager </option>\r\n                {DEVMANAGER.map(m => <option key={m.userid} value={m.userid}>{m.username}</option>)}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group \">\r\n          <button type=\"reset\" className=\"btn btn-md btn-danger\"  >Reset</button> &nbsp;&nbsp;\r\n          <button type=\"submit\" className=\"btn btn-primary btn-md\" >Submit</button>\r\n        </div>\r\n        <br/>\r\n      </form>\r\n    </div>\r\n  )\r\n  /// }\r\n}\r\n\r\nexport default SvcNewRequest","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\layout\\Footer.js",[],["111","112"],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\layout\\Navbar.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\svc\\SvcsearchResultsDataTable.js",["113","114"],"import React,{useState,useEffect}  from 'react'\r\nimport DataTable  from \"react-data-table-component\";\r\nimport {approveORrejectFailure} from \"../../redux-sclice/SvcSclice\";\r\nimport { svcSearchSelector,fetchSvcs } from \"../../redux-sclice/SvcSearchSlice\";\r\nimport axios from 'axios';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useDispatch,useSelector} from 'react-redux';\r\nimport { getOpen,setAlertBox } from '../../redux-sclice/popupwindow';\r\nimport moment from 'moment';\r\n\r\n\r\n\r\n\r\nconst ActionComponent = ({  row, onClick  }) => {\r\n  const clickHandler = () => onClick(row);\r\n  return row.requestStatus==='SUB'?<Button type=\"button\" className=\"btn-sm btn-success\" onClick={clickHandler}>Approve</Button>:\"\";\r\n};\r\n\r\n\r\nconst ActionLinkComponent =({row,onClick}) => {\r\nconst clickLinkHandler = () => onClick(row);\r\n // console.log(row);\r\n  return <a  href={'/approvesvc/'+row.requestid }  onClick={clickLinkHandler}>{row.requestid}</a>\r\n};\r\n\r\nconst  handleLinkAction =(row)=>{\r\n  console.log(row);\r\n}\r\nconst customStyles = {\r\n  heading:{\r\n    style: { \r\n      minHeight:\"35px\",\r\n      fontSize:\"14px\"\r\n    }\r\n  },\r\n  title:{\r\n    style:{\r\n      fontSize:\"14px\"\r\n    }\r\n  },\r\n  text: {\r\n    primary: '#268bd2',\r\n    secondary: '#2aa198',\r\n  },\r\n  rows: {\r\n    style: {\r\n        minHeight: '35px', // override the row height\r\n    },\r\n},\r\n  headRow: {\r\n    style: {\r\n      backgroundColor: '#343a40',// override the row height\r\n      minHeight:\"35px\",\r\n      height:\"10px\"\r\n    }\r\n  } ,\r\n  headCells: {\r\n      style:{\r\n          color:'#f8f9fa',\r\n          fontSize:'16px'\r\n      }\r\n  }\r\n};\r\n\r\n\r\n function  SvcsearchResultsDataTable () {\r\n\r\n // let rowValue = '';\r\n  const [rowValue,setRowValue]=useState(null);\r\n  const [update,setUpdate] = useState(0);\r\n  //const {svclist,svcapproveDetails}=useSelector(svcsSelector)\r\n  const {svclist} = useSelector(svcSearchSelector)\r\n  const dispatch = useDispatch(); // add dispatch function to dipatch action to reducers and update the store\r\n  const user = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user')) : null\r\n  const userid=\"apillai\";\r\n  const [values, setValues] = useState({\r\n    userid: user.name, reqid: '', reqStatus: '', fromdate: '', todate: '', raisedby: '', showall: false\r\n  });\r\n\r\n  const set = name => {\r\n    return ({ target: { value } }) => {\r\n      setValues(oldValues => ({ ...oldValues, [name]: value }));\r\n    }\r\n  };\r\n  function getDescription(text){\r\n    console.log(\"status code\"+text);\r\n    var description='';\r\n    if(text==='APD1'){\r\n      description=\"Approved by Unit/Dev Manager\"\r\n    }\r\n    if(text==='SUB'){\r\n      description=\"Submitted\"\r\n    }\r\n    if(text==='APD2'){\r\n      description=\"Approved by Risk & Assurance Review\"\r\n    }\r\n    if(text==='CLS'){\r\n      description=\"Closed\"\r\n    }\r\n    if(text==='XLD'){\r\n      description=\"Cancelled\"\r\n    }\r\n    if(text==='REJ'){\r\n      description=\"Rejected\"\r\n    }\r\n    return description;\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(\"update\")\r\n    // dispatch(approveOrRejectSVCRequest(rowValue,\"apillai\"));\r\n    if(update!==0&& rowValue!==null){\r\n    apicallForUserRequest().then( result => {\r\n      console.log(result)\r\n      const payload = {type:\"success\",headerText:\"Message\",bodyText:result.data,saveButton:false};\r\n      dispatch(setAlertBox(payload))\r\n      dispatch(getOpen());\r\n      dispatch(fetchSvcs(JSON.stringify(values)));     \r\n    },error => {\r\n      dispatch(approveORrejectFailure())\r\n    })\r\n  }\r\n\r\n  },[update]);\r\n\r\n  const apicallForUserRequest = () => {\r\n    const headers = {\r\n      'Content-Type': 'application/json;charset=UTF-8',\r\n      'Access-Control-Allow-Origin': \"*\"\r\n    }\r\n    const valuesoption = {\r\n      'approver_Unit_Dev_Mngr': 'Y',\r\n      'remarks': 'ok'\r\n    }\r\n\r\n    return axios.post('https://conv.rakbankonline.ae/eida/svc-local/api/v1/svc/approveorrejct/' +rowValue+ '/' +userid, valuesoption, {\r\n      headers: headers\r\n    })\r\n    } \r\n  \r\n\r\n  const handleButtonAction = (row) => {\r\n    console.log(row);\r\n    //rowValue = row;\r\n    setRowValue(row.requestid)\r\n    setUpdate(update+1)\r\n}\r\n\r\n\r\n     const columns =  [\r\n      {\r\n        cell: row =><ActionLinkComponent row={row} onClick={()=>handleLinkAction(row)}></ActionLinkComponent>,\r\n        name: \"Request Id\",\r\n        selector: \"requestid\",\r\n        sortable: true,\r\n        style: {\r\n          fontSize:'18px'\r\n        },\r\n        width:\"120px\"\r\n      },\r\n      {\r\n        name: \"Creator Id\",\r\n        selector: \"creatorid\",\r\n        sortable: true,\r\n        style: {\r\n          fontSize:'18px' \r\n        },\r\n        width:\"120px\"\r\n      },\r\n      {\r\n        name: \"ReqDate\",\r\n        selector: \"requestDate\",\r\n        cell:row =>moment(row.requestDate).format(\"DD-MM-YYYY\"),\r\n        sortable: true,\r\n        right: true,\r\n        width:\"120px\"\r\n        \r\n      },\r\n      {\r\n        name: \"Status\", \r\n        selector: \"requestStatus\",\r\n        cell:row=>getDescription(row.requestStatus),\r\n        sortable: true,\r\n        right: false,\r\n        width:\"150px\"\r\n      },\r\n      {\r\n        name: \"Application\",\r\n        selector: \"applicationName\",\r\n        sortable: true,\r\n        right: true,\r\n        width:\"150px\"\r\n      },\r\n      {\r\n        name:\"Action\",\r\n       cell: row => <ActionComponent row={row} onClick={() => {handleButtonAction(row)}}>Approve</ActionComponent> ,\r\n        ignoreRowClick: true,\r\n        allowOverflow: true,\r\n        button: true,\r\n        width:\"200px\"\r\n      }\r\n    ];\r\n  \r\n    return (\r\n      <DataTable\r\n            title=\"SVC Result Table\"\r\n            columns={columns}\r\n            data={svclist}\r\n            pagination\r\n            fixedHeader\r\n            striped\r\n            fixedHeaderScrollHeight=\"500px\"\r\n            customStyles={customStyles}\r\n        />\r\n//     <DataTable\r\n//         columns={columns}\r\n//         data={svclist}\r\n//         defaultSortField=\"title\"\r\n//         pagination\r\n//         customStyles={customStyles}\r\n//         noContextMenu // comment this to show itemas selected as alert at the top of table\r\n//         fixedHeader\r\n//         fixedHeaderScrollHeight=\"500px\"\r\n//  /> \r\n    \r\n    )\r\n  //}\r\n}\r\n\r\nexport default SvcsearchResultsDataTable","D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\layout\\Header.js",[],"D:\\Sathiyan\\AzurGitRepos\\ReactWorkflow\\src\\components\\layout\\Banner.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":38,"column":6,"nodeType":"121","endLine":38,"endColumn":8,"suggestions":"122"},{"ruleId":"119","severity":1,"message":"123","line":78,"column":6,"nodeType":"121","endLine":78,"endColumn":18,"suggestions":"124"},{"ruleId":"119","severity":1,"message":"120","line":83,"column":6,"nodeType":"121","endLine":83,"endColumn":8,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":155,"column":122,"nodeType":"128","messageId":"129","endLine":155,"endColumn":123},{"ruleId":"130","severity":1,"message":"131","line":3,"column":10,"nodeType":"132","messageId":"133","endLine":3,"endColumn":23},{"ruleId":"130","severity":1,"message":"134","line":3,"column":24,"nodeType":"132","messageId":"133","endLine":3,"endColumn":40},{"ruleId":"130","severity":1,"message":"135","line":3,"column":41,"nodeType":"132","messageId":"133","endLine":3,"endColumn":51},{"ruleId":"130","severity":1,"message":"136","line":3,"column":52,"nodeType":"132","messageId":"133","endLine":3,"endColumn":74},{"ruleId":"130","severity":1,"message":"137","line":22,"column":18,"nodeType":"132","messageId":"133","endLine":22,"endColumn":28},{"ruleId":"119","severity":1,"message":"138","line":44,"column":5,"nodeType":"121","endLine":44,"endColumn":7,"suggestions":"139"},{"ruleId":"115","replacedBy":"140"},{"ruleId":"117","replacedBy":"141"},{"ruleId":"130","severity":1,"message":"142","line":81,"column":9,"nodeType":"132","messageId":"133","endLine":81,"endColumn":12},{"ruleId":"119","severity":1,"message":"143","line":126,"column":5,"nodeType":"121","endLine":126,"endColumn":13,"suggestions":"144"},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchSVCDetailsById'. Either include it or remove the dependency array.","ArrayExpression",["147"],"React Hook useEffect has a missing dependency: 'localSvcDetails'. Either include it or remove the dependency array.",["148"],["149"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unused-vars","'paramSelector' is defined but never used.","Identifier","unusedVar","'fetchDevManagers' is defined but never used.","'fetchTools' is defined but never used.","'fetchApplicationsNames' is defined but never used.","'setReqDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'devManager'. Either include it or remove the dependency array.",["150"],["145"],["146"],"'set' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'apicallForUserRequest', 'dispatch', 'rowValue', and 'values'. Either include them or remove the dependency array.",["151"],"no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"152","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},"Update the dependencies array to be: [fetchSVCDetailsById]",{"range":"161","text":"162"},"Update the dependencies array to be: [localSvcDetails, svcDetails]",{"range":"163","text":"164"},{"range":"165","text":"162"},"Update the dependencies array to be: [devManager]",{"range":"166","text":"167"},"Update the dependencies array to be: [apicallForUserRequest, dispatch, rowValue, update, values]",{"range":"168","text":"169"},[1473,1475],"[fetchSVCDetailsById]",[2597,2609],"[localSvcDetails, svcDetails]",[2700,2702],[2268,2270],"[devManager]",[3483,3491],"[apicallForUserRequest, dispatch, rowValue, update, values]"]